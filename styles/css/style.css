@charset "UTF-8";
/* reset default styles */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/*
using flexbox to solve page layout issues

https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-examples

The main idea behind the flex layout is to give the
container the ability to alter its itemsâ€™ width/height
(and order) to best fill the available space (mostly to accommodate
to all kind of display devices and screen sizes).
A flex container expands items to fill available free space or
shrinks them to prevent overflow.

Note: Flexbox layout is most appropriate to the components
of an application, and small-scale layouts, while the Grid
layout is intended for larger scale layouts.
*/
/* _layout_classic.scss */
/* classic layout has:
  header,
  aside1; side bar
  aside2; side bar
  main; this is main content area
  footer
*/
body {
  padding: 1em;
  background-color: none;
}

.wrapper {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  border: 1pt hidden grey;
  padding: 10px;
  background-color: none;
  font-style: normal;
  font-size: medium;
  font-weight: normal;
  font-family: Arial, Helvetica, sans-serif;
  text-align: center;
}

/* tell all items to be 100% width, via flex-basis */
.wrapper > * {
  padding: 10px;
  flex: 1 100%;
}

.header {
  background: none;
}

.footer {
  background: none;
  border-top: 1pt dashed grey;
}

.main {
  text-align: left;
  background: none;
}

.aside-1 {
  background: none;
}

.aside-2 {
  background: none;
}

/* rely on source order for mobile-first approach
1- header
2- main
3- aside 1
4- aside 2
5- footer
*/
/* medium size screen */
@media all and (min-width: 600px) {
  /* tell both sides to share a row */
  .aside {
    flex: 1 0 0;
  }
}

@media all and (min-width: 800px) {
  /* invert order of first sidebar and main
     And tell the main element to take twice as much
     width as the other two sidebars
  */
  .main {
    flex: 4 0px;
  }
  .aside-1 {
    order: 1;
  }
  .main {
    order: 2;
  }
  .aside-2 {
    order: 3;
  }
  .footer {
    order: 4;
  }
}
